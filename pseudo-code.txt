Encontra o caminho do puzzle para o resultado desejado
Explicação do algoritmo usado pelo método solve()

function solve(){
    calcula as 4 limitacoes do no inicial
    adiciona o no atual a lista de nos nao visitados, _openNodes
    calcula os filhos possiveis do no com base nas limitacoes

    enquanto o a lista de nós nao visitados estiver vazia ou o no atual nao for igual ao objetivo
        no atual passa a ser o primeiro item da lista retirando o mesmo de la
        calcula as 4 limitacoes do no
        calcula os filhos possiveis do no com base nas limitacoes

    retornar o nó atual
}

function generateChildNode(){
    se algum dos limites != null
        trocar a posicao do espaço pelo item do lado desejado
        gerar um nó
        se nó nao estar na lista de nós não visitados adicionar a lista

    inserir nó atual á lista de nós visitados
    retornar a lista de nós não visitados
}

function calculateConstraints(){
    index do espaço
    se o index do espaço + 1 > 8 lado direito = null senao lado direito += 1
    se o index do espaço - 1 > 8 lado esquerdo = null senao lado direito -= 1
    se o index do espaço - 3 > 8 cima = null senao cima -= 3
    se o index do espaço + 3 > 8 baixo = null senao baixo += 3
}

function nodeAlreadyVisited(Node node){
    por cada nófechado em nós visitados
        se o nó == nóFechado
            return true
    senao
        return false
}